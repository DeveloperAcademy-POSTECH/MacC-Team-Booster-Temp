//
//  SubscribeView.swift
//  Mac_Health
//
//  Created by Ï†ïÌöåÏäπ on 2023/10/21.
//

import SwiftUI

struct SubscribeView: View {
    
    @State var seeMore:Bool = false
    @State var showTab = false
    @State var scrollOffset: CGFloat = 0.00
    @State var subscribingSheet = false
    @State var subscribed = true
    @State var loggedIn = true
    @Environment(\.dismiss) var dismiss: DismissAction
    
    var introduce = """
ÏïàÎÖïÌïòÏÑ∏Ïöî! Ïö¥ÎèôÌïòÎäî Í∞úÎ∞úÏûê Ï†ïÌöåÏäπÏûÖÎãàÎã§üêµ
Ïó¨Îü¨Î∂ÑÍ≥º Ìï®Íªò Ïö¥ÎèôÌïòÍ∏∞ ÏúÑÌï¥
Ï†ú Ïö¥ÎèôÏùºÏßÄÎ•º Í≥µÏú†ÌïòÍ≤å ÎêòÏóàÏäµÎãàÎã§
"""
    //Î∞∞Ïó¥Î°ú ÎπºÏÑú Î∂àÎ†õÎ≥ÑÎ°ú Ï§Ñ ÎßûÏ∂úÏßÄ Ï∂îÌõÑ ÏàòÏ†ï ÏòàÏ†ï
    var award: Array = [
        "Wngp ÏÑúÏö∏ ÌÅ¥ÎûòÏãùÌîºÏßÄÌÅ¨ Ï≤¥Í∏â 1ÏúÑ",
        "Wngp ÏÑúÏö∏ Î≥¥ÎîîÎπåÎî© Ï≤¥Í∏â 1ÏúÑ",
        "Wngp ÏÑúÏö∏ ÌÅ¥ÎûòÏãùÌîºÏßÄÌÅ¨ Í∑∏ÎûëÌîÑÎ¶¨ 2ÏúÑ",
        "Wngp ÏÑúÏö∏ Î≥¥ÎîîÎπåÎî© Í∑∏ÎûëÌîÑÎ¶¨ 3ÏúÑ",
        "Npc ÎÇ¥Ï∏ÑÎü¥ Î≥¥ÎîîÎπåÎî© Ïò§Ìîà 4ÏúÑ",
        "Npc ÎÇ¥Ï∏ÑÎü¥ ÌÅ¥ÎûòÏãùÌîºÏßÄÌÅ¨ ÎÖ∏ÎπÑÏä§ 1ÏúÑ",
        "ÎØ∏Ïä§ÌÑ∞ Ïä§ÎàÑ 22 Ïó∞Í±¥ 1ÏúÑ",
        "ÎØ∏Ïä§ÌÑ∞ Ïä§ÎàÑ 23 Í¥ÄÏïÖ 2ÏúÑ",
    ]
    
    var body: some View {
        ZStack {
            Color.gray_900.ignoresSafeArea()
            ScrollView {
                VStack{
                //Íµ¨ÎèÖ ÌéòÏù¥ÏßÄ ÏÑ§Î™Ö
                    IntroPage
                //Íµ¨ÎèÖ Î≤ÑÌäº
                subscribeButton
                //Ïù∏ÌîåÎ£®Ïñ∏ÏÑú ÏÑ§Î™Ö
                    introInfluencer
                //Î£®Ìã¥ ÎØ∏Î¶¨Î≥¥Í∏∞
                RoutinePreview(previewRoutine: previewRoutine[0])
                    .padding(.horizontal, 10)
            }
                .background(GeometryReader {
                    return Color.clear.preference(key: ViewOffsetKey.self, value: -$0.frame(in: .named("scroll")).origin.y)
                })
                .onPreferenceChange(ViewOffsetKey.self) { offset in
                                withAnimation {
                                    if offset > UIScreen.getHeight(422) {
                                        showTab = true
                                    } else  {
                                        showTab = false
                                    }
                                }
                                scrollOffset = offset
                            }
            }
            .coordinateSpace(name: "scroll")
            .overlay(
                showTab ?
                createTab() : nil, alignment: Alignment.bottom
            )
        }
        .navigationBarBackButtonHidden(true)
        .toolbar {
            ToolbarItem(placement: .navigationBarLeading) {
                BackButton
            }
        }
        .ignoresSafeArea(.all)
    }
    
    @ViewBuilder
    var IntroPage: some View {
        ZStack{
            topBackground
            TabView {
                ForEach(1...3, id: \.self) { idx in
                    //ÎëòÎü¨Î≥¥Í∏∞ÏóêÏÑú Íµ¨ÎèÖ Î∑∞
                    ZStack{
                        Image("RotateInfluencer\(idx)")
                            .resizable()
                            .scaledToFit()
                        LinearGradient(colors: [.gray_900,.clear, .clear, .gray_900.opacity(0.7), .gray_900], startPoint: .top, endPoint: .bottom)
                    }
                }
            }
            .tabViewStyle(.page)
            topInfluencerDescription
                
        }
    }
        
        var BackButton: some View {
            Button {
                dismiss()
            } label: {
                Image(systemName: "chevron.left")
                    .foregroundColor(.label_900)
                    .font(.body())
            }
        }
    
    @ViewBuilder
    var introInfluencer: some View {
        VStack(alignment: .leading){
            HStack {
                Text("Ïù∏ÏÇ¨Îßê")
                    .foregroundColor(.label_900)
                    .font(.headline1())
                .padding(.top, 20)
                Spacer()
            }
            Text(introduce)
                .foregroundColor(.label_800)
                .font(.body)
                .padding(.vertical, 10)
            Text("ÏàòÏÉÅÍ≤ΩÎ†•")
                .foregroundColor(.label_900)
                .font(.headline1())
                .padding(.top, 20)
        }
        .padding(.leading)
        .frame(maxWidth: .infinity)
        
    if seeMore == false {
        ZStack(alignment: .top){
            VStack(alignment: .leading){
                ForEach(0..<award.count, id: \.self) { index in
                    HStack{
                        VStack{
                        Text("‚Ä¢")
                                .font(.body)
                            .foregroundColor(.label_800)
                        Spacer()
                    }
                        VStack(alignment: .leading){
                            HStack{
                                Text(award[index])
                                    .font(.body)
                                    .foregroundColor(.label_800)
                                Spacer()
                            }
                            Spacer()
                        }
                    }
                    .padding(.leading, 10)
                }
            }
            .mask(
            Rectangle()
                .frame(width: UIScreen.getWidth(350), height: UIScreen.getHeight(230)))
            .padding()
            LinearGradient(colors: [.clear, .clear, .gray_900.opacity(0.7), .gray_900], startPoint: .top, endPoint: .bottom)
            Button {
                seeMore = true
            } label: {
                VStack{
                    Spacer()
                        .frame(height: UIScreen.getHeight(170))
                    Text("ÎçîÎ≥¥Í∏∞")
                        .font(.headline1())
                        .foregroundColor(Color.label_900)
                }
            }
            
        }
        .frame(width: UIScreen.getWidth(384), height: UIScreen.getHeight(150))
    }
    else {
        VStack(alignment: .leading){
            ForEach(0..<award.count, id: \.self) { index in
                HStack {
                    VStack {
                    Text("‚Ä¢")
                            .font(.body)
                        .foregroundColor(.label_800)
                    Spacer()
                }
                    VStack(alignment: .leading){
                        HStack {
                            Text(award[index])
                                .font(.body)
                                .foregroundColor(.label_800)
                            Spacer()
                        }
                        Spacer()
                    }
                }
                .padding(.leading, 10)
            }
        }
        .padding()
    }
    }
        
        
    
    var subscribeButton: some View {
        Button {
            self.subscribingSheet = true
            self.subscribed.toggle()
        } label: {
            FloatingButton(backgroundColor: subscribed ? .green_main : .gray_900) { subscribed ? Text("Íµ¨ÎèÖ")
                    .foregroundColor(.gray_900)
                    .font(.button1())
                :
                Text("Íµ¨ÎèÖ Ï∑®ÏÜå")
                    .foregroundColor(.red_main)
                    .font(.button1())
            }

        }
        .alert(isPresented: $subscribingSheet) {
            loggedIn ?
            subscribed ?
            Alert(
                title: Text("Íµ¨ÎèÖÏù¥ Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§."),
                message: Text(""),
                dismissButton: .destructive(Text("ÌôïÏù∏"),
                                        action: {
                                            //Íµ¨ÎèÖ Ï∑®ÏÜå
                                            
                                })
            ) :
            Alert(
                title: Text("Íµ¨ÎèÖÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§."),
                message: Text(""),
                dismissButton: .destructive(Text("ÌôïÏù∏"),
                                        action: {
                                            //Íµ¨ÎèÖ ÏôÑÎ£å
                                            
                                })
            )
            :
            Alert(
                title: Text("Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§."),
                message: Text(""),
                primaryButton: .destructive(Text("ÌôïÏù∏"),
                                        action: {
                                            //Î°úÍ∑∏Ïù∏ Î∑∞ Ïù¥Îèô
                                            
                                }),
                                secondaryButton: .cancel(Text("Ï∑®ÏÜå"))
            )
            
        }
        
    }
    
    fileprivate func createTab() -> some View {
        return subscribeButton
            .padding(.bottom, 30)
            .transition(.scale)
    }
    
    var topInfluencerDescription: some View {
        ZStack(alignment: .bottomTrailing){
            VStack{
                Spacer()
                HStack{
                    VStack(alignment: .leading, spacing: 16){
                        Text("Ï†ïÌöåÏäπÏùò Smart Routine")
                            .foregroundColor(.label_900)
                            .font(.title1())
                        Text("2022 Mr. ÏÑúÏö∏ÎåÄüèÜ")
                            .foregroundColor(.label_600)
                            .font(.body2())
                            .padding(.bottom, 40)
                    }
                    Spacer()
                }
                .padding(.leading, 20)
            }
        }
        .frame(height: UIScreen.getHeight(358))
        
    }
    
    var topBackground: some View {
        ZStack(alignment: .bottomTrailing){
            Color.gray_900.ignoresSafeArea()
            HStack{
                Spacer()
                Image("Background1")
                    .resizable()
                    .scaledToFit()
            }
        }
        .frame(height: UIScreen.getHeight(358))

    }
    
}

struct ViewOffsetKey: PreferenceKey {
    typealias Value = CGFloat
    static var defaultValue = CGFloat.zero
    static func reduce(value: inout Value, nextValue: () -> Value) {
        value += nextValue()
    }
}

struct RoutinePreview: View {
    //ÎÇ†Ïßú Î≥ÄÌôò
    var date: String = "2023ÎÖÑ 10Ïõî 15Ïùº"
    var part: String = "Îì±/Í∞ÄÏä¥"
    var firstPart = "Îì±"
    var secondPart = "Í∞ÄÏä¥"
    let previewRoutine: PreviewRoutine
    
    var body: some View {
        ZStack{
            Color.gray_900.ignoresSafeArea()
            VStack {
                HStack{
                    VStack(alignment: .leading){
                        Text("Î£®Ìã¥ ÎØ∏Î¶¨Î≥¥Í∏∞")
                            .font(.title2)
                            .foregroundColor(.label_900)
                        HStack{
                            Text(date)
                                .font(.headline2())
                                .foregroundColor(.label_700)
                            Rectangle()
                                .frame(width:1, height: 10)
                                .foregroundColor(.label_400)
                            Text(part)
                                .font(.headline2())
                                .foregroundColor(.label_700)
                            
                        }
                    }
                    .padding(20)
                    Spacer()
                }
                HStack{
                    Text(firstPart)
                        .font(.headline1())
                        .foregroundColor(.label_900)
                        .padding(20)
                    Spacer()
                }
                //Ïö¥Îèô Î£®Ìã¥
                WorkoutExplain
                //Ï≤´ Ïö¥Îèô ÌåÅ ÏÑ§Î™Ö
                //ZStack{
                HStack(alignment: .top){
                    Image("descriptionFace1")
                        .resizable()
                        .scaledToFit()
                        .frame(width: UIScreen.getWidth(48))
                        .padding(10)
                    VStack(alignment: .leading){
                        Text("Ïö¥Îèô ÌåÅ ÏòàÏãú")
                            .font(.body2())
                            .foregroundColor(.label_500)
                            .padding(.bottom, 5)
                        
                        Text(previewRoutine.exerciseTip!)
                            .font(.body)
                            .foregroundColor(.label_900)
                    }
                    .padding(.vertical, 10)
                }
                    .padding(10)
                    .background{
                        RoundedRectangle(cornerRadius: 8)
                            .foregroundColor(.gray_700)
                    }
                    .padding(20)
//                }
                WorkoutExplain
                //Î∂ÄÏúÑÎ≥Ñ Îã§Î•∏ÏßÄ Ï≤¥ÌÅ¨
                HStack{
                    Text(secondPart)
                        .font(.headline1())
                        .foregroundColor(.label_900)
                        .padding(20)
                    Spacer()
                }
                WorkoutExplain
                WorkoutExplain
                
            }
            .padding(.bottom, 30)
            VStack{
                Spacer()
                Image("previewGradient")
                    .resizable()
                    .scaledToFit()
            }
        }
        
    }
    
    @ViewBuilder
    var WorkoutExplain: some View {
        HStack{
            Image("CloseGripLatPullDown")
                .resizable()
                .frame(width: UIScreen.getWidth(64), height: UIScreen.getHeight(64))
                .padding(.leading, 20)
            VStack(alignment: .leading){
                Text("ÌÅ¥Î°úÏ¶à Í∑∏Î¶Ω Îû´ ÌíÄ Îã§Ïö¥")
                    .font(.headline1())
                    .foregroundColor(.label_900)
                HStack{
                    Text("3ÏÑ∏Ìä∏")
                        .font(.headline2())
                        .foregroundColor(.label_700)
                    Rectangle()
                        .frame(width:1, height: 10)
                        .foregroundColor(.label_400)
                    Text(part)
                        .font(.headline2())
                        .foregroundColor(.label_700)
                    
                }
            }
            .padding(.leading, 10)

            Spacer()
        }
    }
}

struct SubscribeView_Previews: PreviewProvider {
    static var previews: some View {
        SubscribeView()
    }
}
