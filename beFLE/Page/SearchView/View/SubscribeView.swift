//
//  SubscribeView.swift
//  beFLE
//
//  Created by Ï†ïÌöåÏäπ on 2023/10/21.
//

import SwiftUI

struct SubscribeView: View {
    let influencerId: Int
    
    @StateObject var vm = SubscribeViewModel()
    
    @Environment(\.dismiss) var dismiss: DismissAction
    
    var introduce = """
ÏïàÎÖïÌïòÏÑ∏Ïöî! Ïö¥ÎèôÌïòÎäî Í∞úÎ∞úÏûê Ï†ïÌöåÏäπÏûÖÎãàÎã§üêµ
Ïó¨Îü¨Î∂ÑÍ≥º Ìï®Íªò Ïö¥ÎèôÌïòÍ∏∞ ÏúÑÌï¥
Ï†ú Ïö¥ÎèôÏùºÏßÄÎ•º Í≥µÏú†ÌïòÍ≤å ÎêòÏóàÏäµÎãàÎã§
"""
    //Î∞∞Ïó¥Î°ú ÎπºÏÑú Î∂àÎ†õÎ≥ÑÎ°ú Ï§Ñ ÎßûÏ∂úÏßÄ Ï∂îÌõÑ ÏàòÏ†ï ÏòàÏ†ï
    var award: Array = [
        "Wngp ÏÑúÏö∏ ÌÅ¥ÎûòÏãùÌîºÏßÄÌÅ¨ Ï≤¥Í∏â 1ÏúÑ",
        "Wngp ÏÑúÏö∏ Î≥¥ÎîîÎπåÎî© Ï≤¥Í∏â 1ÏúÑ",
        "Wngp ÏÑúÏö∏ ÌÅ¥ÎûòÏãùÌîºÏßÄÌÅ¨ Í∑∏ÎûëÌîÑÎ¶¨ 2ÏúÑ",
        "Wngp ÏÑúÏö∏ Î≥¥ÎîîÎπåÎî© Í∑∏ÎûëÌîÑÎ¶¨ 3ÏúÑ",
        "Npc ÎÇ¥Ï∏ÑÎü¥ Î≥¥ÎîîÎπåÎî© Ïò§Ìîà 4ÏúÑ",
        "Npc ÎÇ¥Ï∏ÑÎü¥ ÌÅ¥ÎûòÏãùÌîºÏßÄÌÅ¨ ÎÖ∏ÎπÑÏä§ 1ÏúÑ",
        "ÎØ∏Ïä§ÌÑ∞ Ïä§ÎàÑ 22 Ïó∞Í±¥ 1ÏúÑ",
        "ÎØ∏Ïä§ÌÑ∞ Ïä§ÎàÑ 23 Í¥ÄÏïÖ 2ÏúÑ"
    ]
    
    var body: some View {
        ZStack {
            Color.gray_900.ignoresSafeArea()
            ScrollView {
                VStack {
                    //Íµ¨ÎèÖ ÌéòÏù¥ÏßÄ ÏÑ§Î™Ö
                    IntroPage
                    //Íµ¨ÎèÖ Î≤ÑÌäº
                    subscribeButton
                    //Ïù∏ÌîåÎ£®Ïñ∏ÏÑú ÏÑ§Î™Ö
                    introInfluencer
                    bodyInformation
                    strengthInformation
                    //Î£®Ìã¥ ÎØ∏Î¶¨Î≥¥Í∏∞
                    RoutinePreview()
                        .padding(.horizontal)
                }
                .background(GeometryReader {
                    return Color.clear.preference(key: ViewOffsetKey.self, value: -$0.frame(in: .named("scroll")).origin.y)
                })
                .onPreferenceChange(ViewOffsetKey.self) { offset in
                    withAnimation {
                        if offset > UIScreen.getHeight(422) {
                            vm.showTab = true
                        } else  {
                            vm.showTab = false
                        }
                    }
                    vm.scrollOffset = offset
                }
            }
            .coordinateSpace(name: "scroll")
            .overlay(
                vm.showTab ?
                createTab() : nil, alignment: Alignment.bottom
            )
        }
        .onAppear {
            vm.fetchInfluencer(influencerId: influencerId)
        }
        .navigationBarBackButtonHidden(true)
        .toolbar {
            ToolbarItem(placement: .navigationBarLeading) {
                BackButton
            }
        }
        .gesture(
            DragGesture().onChanged { value in
                if value.startLocation.x < 50 {
                    vm.offset = value.translation.width
                }
            }
                .onEnded { value in
                    if value.predictedEndTranslation.width > 100 {
                        dismiss()
                    }
                    vm.offset = .zero
                }
        )
        .offset(x: vm.offset)
        .animation(.easeInOut)
        .ignoresSafeArea(.all)
    }
    
    @ViewBuilder
    var IntroPage: some View {
        VStack{
//            topBackground
            TabView {
                ForEach(Array(vm.influencer.carouselImageUrls), id: \.self) { imageUrl in
                    ZStack {
                        LoadingImage(url: imageUrl)
                            .frame(width: UIScreen.getWidth(390), height: UIScreen.getHeight(358))
                        
                        LinearGradient(colors: [.gray_900, .clear, .clear, .gray_900.opacity(0.7), .gray_900], startPoint: .top, endPoint: .bottom)
                    }
                }
            }
            .tabViewStyle(.page)
            .frame(width: UIScreen.getWidth(390), height: UIScreen.getHeight(358))
            topInfluencerDescription
        }
    }
    
    var BackButton: some View {
        Button {
            dismiss()
        } label: {
            Image(systemName: "chevron.left")
                .foregroundColor(.label_900)
                .font(.headline2())
        }
    }
    
    @ViewBuilder
    var introInfluencer: some View {
        VStack{
            VStack(alignment: .leading){
                HStack {
                    Text("Ïù∏ÏÇ¨Îßê")
                        .foregroundColor(.label_900)
                        .font(.headline1())
                        .padding(.top, 30)
                    Spacer()
                }
                Text(vm.influencer.introduce)
                    .foregroundColor(.label_800)
                    .font(.body())
                    .padding(.top, 10)
                    .lineSpacing(8.0)
                Text("ÏàòÏÉÅÍ≤ΩÎ†•")
                    .foregroundColor(.label_900)
                    .font(.headline1())
                    .padding(.top, 30)
            }
            .padding(.top, 15)
            .padding(.leading)
            .frame(maxWidth: .infinity)
            VStack(alignment: .leading) {
                ForEach(0..<vm.seperateAward(input: vm.influencer.awards).count, id: \.self) { index in
                    HStack {
                        VStack {
                            Text("‚Ä¢")
                                .font(.body)
                                .foregroundColor(.label_800)
                            Spacer()
                        }
                        VStack(alignment: .leading){
                            HStack {
                                Text(vm.seperateAward(input: vm.influencer.awards)[index])
                                    .font(.body())
                                    .foregroundColor(.label_800)
                                Spacer()
                            }
                            Spacer()
                        }
                    }
                    .padding(.leading, 10)
                }
            }
            .padding(.horizontal)
            .padding(.top, 12)
            .padding(.bottom, 5)
            //            }
        }
    }
    
    
    @ViewBuilder
    var subscribeButton: some View {
            Button {
                vm.influencer.isSubscription ? vm.unSubscribeInfluecer(influencerId: influencerId) : vm.subscribeInfluecer(influencerId: influencerId)
            } label: {
                FloatingButton(size: .medium, color: vm.influencer.isSubscription ? .gray_600 : .green_main) {
                    vm.influencer.isSubscription ?
                    Text("Íµ¨ÎèÖÏ∑®ÏÜå")
                        .foregroundColor(.red_main)
                        .font(.button1())
                    :
                    Text("Íµ¨ÎèÖ")
                        .foregroundColor(.gray_900)
                        .font(.button1())
                }
            }
            .alert(vm.influencer.isSubscription ? "Íµ¨ÎèÖÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§." : "Íµ¨ÎèÖÏù¥ Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§.", isPresented: $vm.isSubscriptionAlertShow) {
                Button("ÌôïÏù∏") {
                    //TODO: ÏÑúÎ≤ÑÏóê vm.routines.routines Î≥ÄÌôî
                    dismiss()
                }
            }
    }
    
    fileprivate func createTab() -> some View {
        return subscribeButton
            .padding(.bottom, 30)
            .transition(.scale)
    }
    
    var topInfluencerDescription: some View {
        ZStack(alignment: .bottomTrailing) {
            VStack {
                Spacer()
                HStack {
                    VStack(alignment: .leading) {
                        Text("\(vm.influencer.influencerName)Ïùò \(vm.influencer.routineName)")
                            .foregroundColor(.label_900)
                            .font(.title1())
                            .padding(.bottom, 3)
                        Text(vm.influencer.title)
                            .foregroundColor(.label_600)
                            .font(.body2())
                            .padding(.bottom, 20)
                    }
                    Spacer()
                }
                .padding(.vertical, 5)
                .padding(.leading, 20)
            }
        }
    }
    
    var bodyInformation: some View {
        HStack{
            VStack(alignment: .leading, spacing: 5){
                Text("Ïã†Ï≤¥Ï†ïÎ≥¥")
                    .foregroundColor(.label_900)
                    .font(.headline1())
                    .padding(.top, 20)
                    .padding(.bottom, 12)
                Text("ÌÇ§: \(vm.influencer.bodySpec.height)cm")
                    .foregroundColor(.label_800)
                    .font(.body())
                Text("Î™∏Î¨¥Í≤å: \(vm.influencer.bodySpec.weight)kg")
                    .foregroundColor(.label_800)
                    .font(.body())
            }
            Spacer()
        }
        .padding(.horizontal)
        .padding(.bottom, 10)
    }
    
    var strengthInformation: some View {
        HStack{
            VStack(alignment: .leading, spacing: 5){
                Text("3ÎåÄ Ï§ëÎüâ")
                    .foregroundColor(.label_900)
                    .font(.headline1())
                    .padding(.top, 20)
                    .padding(.bottom, 12)
                Text("Squat: \(vm.influencer.bigThree.squat)kg")
                    .foregroundColor(.label_800)
                    .font(.body())
                Text("Deadlift: \(vm.influencer.bigThree.deadLift)kg")
                    .foregroundColor(.label_800)
                    .font(.body())
                Text("Bench Press: \(vm.influencer.bigThree.benchPress)kg")
                    .foregroundColor(.label_800)
                    .font(.body())
            }
            Spacer()
        }
        .padding(.horizontal)
        .padding(.bottom, 10)
    }
    
}

struct ViewOffsetKey: PreferenceKey {
    typealias Value = CGFloat
    static var defaultValue = CGFloat.zero
    static func reduce(value: inout Value, nextValue: () -> Value) {
        value += nextValue()
    }
}

struct WorkoutExplain: View {
    let ImageName: String
    let WorkoutName: String
    let SetCount: String
    let part: String
    
    var body: some View {
        HStack{
            Image(ImageName)
                .resizable()
                .frame(width: UIScreen.getWidth(64), height: UIScreen.getHeight(64))
                .background{
                    RoundedRectangle(cornerRadius: 4)
                        .foregroundColor(.fill_1)
                        .frame(width: UIScreen.getWidth(64), height: UIScreen.getHeight(64))
                }
            VStack(alignment: .leading){
                Text(WorkoutName)
                    .font(.headline1())
                    .foregroundColor(.label_900)
                HStack{
                    Text(SetCount)
                        .font(.body2())
                        .foregroundColor(.label_700)
                    Rectangle()
                        .frame(width:1, height: 10)
                        .foregroundColor(.label_400)
                    Text(part)
                        .font(.body2())
                        .foregroundColor(.label_700)
                    
                }
            }
            
            Spacer()
        }
        .frame(maxWidth: .infinity)
    }
}

//struct SubscribeView_Previews: PreviewProvider {
//    static var previews: some View {
//        SubscribeView()
//    }
//}
